#include <iostream>
#include<climits>
#include<algorithm>
using namespace std;
int binarysearch(int arr[],int low,int high,int key){
    if(high<low)
    {
        return -1;
    }
    int mid=(low+high)/2;
    if(arr[mid]==key){
        return mid;
    }
    if(arr[mid]>key){
        return binarysearch(arr,low,mid-1,key);
    }
    else{
        return binarysearch(arr,mid+1,high,key);
    }
}
int findMaxSubarraySumUtil(int a[],int B[],int n,int m){
    int max_so_far=INT_MIN;
    int max_ending_here=0;
    int s=0;
    int start=0;
    int end=0;
    for(int i=0;i<n;i++){
        if(binarysearch(B,0,n-1,a[i])!=-1){
           max_ending_here=0;
           continue;
        }
        max_ending_here+=a[i];
        if(max_so_far<max_ending_here){
            max_so_far=max_ending_here;
            start=s;
            end=i;
        }
        if(max_ending_here<0){
            max_ending_here=0;
            s=i+1;
        }
    }
    return max_so_far;
}
void findMaxSubarraySum(int A[], int B[],  
                        int n, int m) 
{ 
    // sort array B to apply Binary Search 
    sort(B, B + m); 
  
    int maxSubarraySum = findMaxSubarraySumUtil(A, B,  
                                                n, m); 
  
    // This case will occour when all elements 
    // of A are present in B, thus no subarray  
    // can be formed  
    if (maxSubarraySum == INT_MIN) { 
        cout << "Maximum subarray sum cant be found"
            << endl; 
    } 
    else { 
        cout << "The Maximum subarray sum = "
             << maxSubarraySum << endl; 
    } 
} 
  
// Driver Code 
int main() 
{ 
    int A[] = { 3, 4, 5, -4, 6 }; 
    int B[] = { 1, 8, 5 }; 
  
    int n = sizeof(A) / sizeof(A[0]); 
    int m = sizeof(B) / sizeof(B[0]); 
  
    // Calling fucntion 
    findMaxSubarraySum(A, B, n, m); 
    return 0; 
} 
